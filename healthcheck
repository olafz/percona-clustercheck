#!/bin/bash
#
# Script to make a proxy (ie HAProxy) capable of monitoring Percona XtraDB Cluster nodes properly
#
# Author: Olaf van Zandwijk <olaf.vanzandwijk@nedap.com>
# Author: Raghavendra Prabhu <raghavendra.prabhu@percona.com>
#
# Documentation and download: https://github.com/olafz/percona-clustercheck
#
# Based on the original script from Unai Rodriguez
#

if [[ $1 == '-h' || $1 == '--help' ]];then
    echo "Usage: $0 <user> <pass> <available_when_donor=0|1> <log_file> <available_when_readonly=0|1> <defaults_extra_file>"
    exit
fi

# if the disabled file is present, return 503. This allows
# admins to manually remove a node from a cluster easily.
if [ -e "/var/tmp/healthcheck.disabled" ]; then
    # Shell return-code is 1
    echo -en "HTTP/1.1 503 Service Unavailable\r\n"
    echo -en "Content-Type: text/plain\r\n"
    echo -en "Connection: close\r\n"
    echo -en "Content-Length: 51\r\n"
    echo -en "\r\n"
    echo -en "This Node is manually disabled.\r\n"
    sleep 0.1
    exit 1
fi

set -e

if [ -f /etc/sysconfig/healthcheck ]; then
        . /etc/sysconfig/healthcheck
fi

MYSQL_USERNAME="${1-$MYSQL_USERNAME}"
MYSQL_USERNAME="${MYSQL_USERNAME:-healthcheckuser}"
MYSQL_PASSWORD="${2-$MYSQL_PASSWORD}"
MYSQL_PASSWORD="${MYSQL_PASSWORD-healthcheckpassword!}"
AVAILABLE_WHEN_DONOR=${3-$AVAILABLE_WHEN_DONOR}
AVAILABLE_WHEN_DONOR=${AVAILABLE_WHEN_DONOR:-0}
ERR_FILE="${4-$ERR_FILE}"
ERR_FILE="${ERR_FILE:-/dev/null}"
AVAILABLE_WHEN_READONLY=${5-$AVAILABLE_WHEN_READONLY}
AVAILABLE_WHEN_READONLY=${AVAILABLE_WHEN_READONLY:-1}
DEFAULTS_EXTRA_FILE=${6-$DEFAULTS_EXTRA_FILE}
DEFAULTS_EXTRA_FILE=${DEFAULTS_EXTRA_FILE:-/etc/my.cnf}

#Timeout exists for instances where mysqld may be hung
TIMEOUT=10

EXTRA_ARGS=""
if [[ -n "$MYSQL_USERNAME" ]]; then
    EXTRA_ARGS="$EXTRA_ARGS --user=${MYSQL_USERNAME}"
fi
if [[ -n "$MYSQL_PASSWORD" ]]; then
    EXTRA_ARGS="$EXTRA_ARGS --password=${MYSQL_PASSWORD}"
fi
if [[ -r $DEFAULTS_EXTRA_FILE ]];then
    MYSQL_CMDLINE="mysql --defaults-extra-file=$DEFAULTS_EXTRA_FILE -nNE --connect-timeout=$TIMEOUT \
                    ${EXTRA_ARGS}"
else
    MYSQL_CMDLINE="mysql -nNE --connect-timeout=$TIMEOUT ${EXTRA_ARGS}"
fi

#
# Check, if WSREP is enabled on this node
#
WSREP_ON=$($MYSQL_CMDLINE -e "SHOW VARIABLES LIKE 'wsrep_on'" 2>>${ERR_FILE} || echo "ERROR" | tail -1 2>>${ERR_FILE})

# If command fails, exit immediately
if [[ "${WSREP_ON}" == "ERROR" ]]
then
    # No connection to MySQL server possible
    # Shell return-code is 1
    echo -en "HTTP/1.1 503 Service Unavailable\r\n"
    echo -en "Content-Type: text/plain\r\n"
    echo -en "Connection: close\r\n"
    echo -en "Content-Length: 44\r\n"
    echo -en "\r\n"
    echo -en "Could not connect to MySQL server.\r\n"
    sleep 0.1
    exit 12

elif [[ "${WSREP_ON}" == "ON" ]]
then
    # WSREP is enabled, so check the wsrep_local_state

    WSREP_STATUS=$($MYSQL_CMDLINE -e "SHOW STATUS LIKE 'wsrep_local_state';" \
        2>>${ERR_FILE} | tail -1 2>>${ERR_FILE})

    if [[ "${WSREP_STATUS}" == "4" ]] || [[ "${WSREP_STATUS}" == "2" && ${AVAILABLE_WHEN_DONOR} == 1 ]]
    then
        # Check only when set to 0 to avoid latency in response.
        if [[ $AVAILABLE_WHEN_READONLY -eq 0 ]];then
            READ_ONLY=$($MYSQL_CMDLINE -e "SHOW GLOBAL VARIABLES LIKE 'read_only';" \
                        2>>${ERR_FILE} | tail -1 2>>${ERR_FILE})
    
            if [[ "${READ_ONLY}" == "ON" ]];then
                # Percona XtraDB Cluster node local state is 'Synced', but it is in
                # read-only mode. The variable AVAILABLE_WHEN_READONLY is set to 0.
                # => return HTTP 503
                # Shell return-code is 1
                echo -en "HTTP/1.1 503 Service Unavailable\r\n"
                echo -en "Content-Type: text/plain\r\n"
                echo -en "Connection: close\r\n"
                echo -en "Content-Length: 43\r\n"
                echo -en "\r\n"
                echo -en "Percona XtraDB Cluster Node is read-only.\r\n"
                sleep 0.1
                exit 1
            fi
        fi
        # Percona XtraDB Cluster node local state is 'Synced' => return HTTP 200
        # Shell return-code is 0
        echo -en "HTTP/1.1 200 OK\r\n"
        echo -en "Content-Type: text/plain\r\n"
        echo -en "Connection: close\r\n"
        echo -en "Content-Length: 40\r\n"
        echo -en "\r\n"
        echo -en "Percona XtraDB Cluster Node is synced.\r\n"
        sleep 0.1
        exit 0
    else
        # Percona XtraDB Cluster node local state is not 'Synced' => return HTTP 503
        # Shell return-code is 1
        echo -en "HTTP/1.1 503 Service Unavailable\r\n"
        echo -en "Content-Type: text/plain\r\n"
        echo -en "Connection: close\r\n"
        echo -en "Content-Length: 44\r\n"
        echo -en "\r\n"
        echo -en "Percona XtraDB Cluster Node is not synced.\r\n"
        sleep 0.1
        exit 1
    fi
else
    # WSREP is disabled, check if node is read-only
             # Check only when set to 0 to avoid latency in response.
    if [[ $AVAILABLE_WHEN_READONLY -eq 0 ]];then
        READ_ONLY=$($MYSQL_CMDLINE -e "SHOW GLOBAL VARIABLES LIKE 'read_only';" \
                    2>>${ERR_FILE} | tail -1 2>>${ERR_FILE})

        if [[ "${READ_ONLY}" == "ON" ]];then
            # Percona XtraDB Cluster node local state is 'Synced', but it is in
            # read-only mode. The variable AVAILABLE_WHEN_READONLY is set to 0.
            # => return HTTP 503
            # Shell return-code is 1
            echo -en "HTTP/1.1 503 Service Unavailable\r\n"
            echo -en "Content-Type: text/plain\r\n"
            echo -en "Connection: close\r\n"
            echo -en "Content-Length: 43\r\n"
            echo -en "\r\n"
            echo -en "MySQL server is read-only.\r\n"
            sleep 0.1
            exit 1
        fi
    fi
    # Node is ready.
    # Shell return-code is 0
    echo -en "HTTP/1.1 200 OK\r\n"
    echo -en "Content-Type: text/plain\r\n"
    echo -en "Connection: close\r\n"
    echo -en "Content-Length: 40\r\n"
    echo -en "\r\n"
    echo -en "MySQL server is ready.\r\n"
    sleep 0.1
    exit 0
fi
